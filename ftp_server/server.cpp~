#include <stdio.h>
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define bufferSize 1024

char currDir[100];
int port = 1025;

int getPort()
{
	port++;
	if (port == 5000)
		port = 1025;
	return port;
}

void sendFile(int sockfd, char* filename)
{
	FILE* fp;
	fp = fopen(filename, "rb");
	if (fp == NULL)
	{
        printf("Can not open file: %s.\n", filename);
        long fileLen = 0L;
		char sendLen[100] = {0}; 
		sprintf(sendLen, "%ld", fileLen);
		send(sockfd, sendLen, strlen(sendLen), 0);
        return;
    }
	else
	{
		fseek(fp, 0L, SEEK_END);
		long fileLen = ftell(fp);
		fseek(fp, 0L, SEEK_SET);
		char sendLen[100] = {0}; 
		sprintf(sendLen, "%ld", fileLen);
		send(sockfd, sendLen, strlen(sendLen), 0);
		char buffer[bufferSize] = {0};
		recv(sockfd, buffer, bufferSize, 0);
		memset(buffer, 0, bufferSize);
		int len;
		while ((len = fread(buffer, 1, bufferSize, fp)) > 0)
		{
		    send(sockfd, buffer, len, 0);
		    memset(buffer, 0, bufferSize);
			fileLen -= len;
			if (fileLen <= 0)
				break;
		}
	}
    fclose(fp);
}

void recvFile(int sockfd, char* filename)
{
    char buffer[bufferSize] = {0};
	strcpy(buffer, "start receive file");
	send(sockfd, buffer, bufferSize, 0);
	memset(buffer, 0, bufferSize);
	recv(sockfd, buffer, bufferSize, 0);
	long fileLen = atol(buffer);
	if (fileLen == 0L)
	{
		printf("Can not open file: %s.\n", filename);
		return;
	}
	//printf("fileLen:%ld\n", fileLen);
	memset(buffer, 0, bufferSize);
	strcpy(buffer, "OK");
	send(sockfd, buffer, bufferSize, 0);
    int outputFile;
    if ((outputFile = open(filename, O_WRONLY|O_CREAT|O_TRUNC, 0644)) < 0)
    {
        printf("Can not open file: %s\n", filename);
        char errInfo[] = "Open file error";
        send(sockfd, errInfo, sizeof(errInfo), 0);
        return;
    }
	memset(buffer, 0, bufferSize);
    int len;
    while ((len = recv(sockfd, buffer, bufferSize, 0)) > 0)
    {
        write(outputFile, buffer, len);
        memset(buffer, 0, bufferSize);
		fileLen -= len;
		if (fileLen <= 0)
			break;
    }
    close(outputFile);
}

void cmdGet(int sockfd, char* filename)
{
    sendFile(sockfd, filename);
}

void cmdPut(int sockfd, char* filename)
{
    recvFile(sockfd, filename);
}

void cmdPwd(int sockfd)
{
    send(sockfd, currDir, sizeof(currDir), 0);
}

void cmdDir(int sockfd)
{
    system("ls > .tmp");
    char filename[] = ".tmp";
    sendFile(sockfd, filename);
    system("rm .tmp");
}

void cmdCd(int sockfd, char* args)
{
    int success;
    if ((success = chdir(args)) == 0)
    {
        getcwd(currDir, sizeof(currDir));
        send(sockfd, currDir, sizeof(currDir) ,0);
    }
    else
    {
        char errInfo[] = "cd error";
        send(sockfd, errInfo, sizeof(errInfo), 0);
    }
}

void cmdHelp(int sockfd)
{
    char buffer[bufferSize] = {0};
    strcpy(buffer, "get : get file from server\n");
    strcat(buffer, "put : send file to server\n");
    strcat(buffer, "pwd : get present directory on server\n");
    strcat(buffer, "dir : list present directory on server\n");
    strcat(buffer, "cd  : change present directory on server\n");
    strcat(buffer, "?   : get information\n");
    strcat(buffer, "quit: quit client\n");
    send(sockfd, buffer, strlen(buffer), 0);
}

int main(int argc, char** argv)
{
    if (argc < 2)
    {
        printf("Usage: server <port>\n");
        return 0;
    }

    int serverMsg;
    int port = atoi(argv[1]);
    serverMsg = socket(AF_INET, SOCK_STREAM, 0); 
    int opt = 1;
    setsockopt(serverMsg , SOL_SOCKET , SO_REUSEADDR , &opt , sizeof(opt));
    if (serverMsg < 0)
    {
        perror("Initial socket fail");
        exit(1);
    }

    sockaddr_in serverMsgIn;
    memset(&serverMsgIn, 0, sizeof(serverMsgIn));
    serverMsgIn.sin_family = AF_INET;
    serverMsgIn.sin_addr.s_addr = htonl(INADDR_ANY);
    serverMsgIn.sin_port = htons(port);
    if (bind(serverMsg, (struct sockaddr*) &serverMsgIn, sizeof(serverMsgIn)) < 0)
    {
        perror("Bind fail");
        exit(1);
    }
  
    unsigned int lengthMsg = sizeof(serverMsg);
    if (getsockname(serverMsg, (struct sockaddr*) &serverMsgIn, &lengthMsg) < 0)
    {
        perror("Get socket name fail");
        exit(1);
    }

    if (listen(serverMsg, 20) < 0)
    {
        perror("Listen fail");
        exit(1);
    }

    pid_t child; //client子进程
    char command[10] = {0}; //client命令
    char args[50] = {0}; //命令参数
    int msgsock;  
    memset(currDir, 0, sizeof(currDir));
    getcwd(currDir, sizeof(currDir)); //获得当前目录
    printf("Server starts.\n");

    while(1)
    {
        msgsock = accept(serverMsg, NULL, NULL); //命令通道连接
        if (msgsock == -1)
        {
            perror("Accept error");
            break;
        }
		int port = getPort();
        if ((child = fork()) == -1)
        {
            printf("Fork error.\n");
            break;
        }
        if (child == 0)
        {
            printf("Connection succeeded.\n");
			int serverData, datasock;
			int opt2 = 1;
			recv(msgsock, command, sizeof(command), 0);
			if (!strcmp(command, "PASV"))
			{
				serverData = socket(AF_INET, SOCK_STREAM, 0);
    			setsockopt(serverData , SOL_SOCKET , SO_REUSEADDR , &opt2 , sizeof(opt2));
				sockaddr_in serverDataIn;
				memset(&serverDataIn, 0, sizeof(serverDataIn));
    			serverDataIn.sin_family = AF_INET; //设置协议族
    			serverDataIn.sin_addr.s_addr = htonl(INADDR_ANY); //监听所有地址
				//int port = getPort();
				printf("port:%d\n", port);
				serverDataIn.sin_port = htons(port);
				if (bind(serverData, (struct sockaddr*) &serverDataIn, sizeof(serverDataIn)) < 0)
    			{
        			perror("Bind fail");
        			exit(1);
    			}
				unsigned int lengthData = sizeof(serverData);
				if (getsockname(serverData, (struct sockaddr*) &serverDataIn, &lengthData) < 0)
				{
					perror("Get socket name fail");
					exit(1);
				}
				printf("Socket port: %d %d\n",ntohs(serverDataIn.sin_port),ntohs(serverMsgIn.sin_port));
				if (listen(serverData, 20) < 0)
				{
					perror("Listen fail");
					exit(1);
				}
				sprintf(args, "%d", port);
				send(msgsock, args, strlen(args), 0);
				datasock = accept(serverData, NULL, NULL);
			}
			else
				exit(1);
            while(1)
            {
                memset(command, 0, sizeof(command));
                int len = 0;
                len = recv(msgsock, command, sizeof(command), 0); //读命令
                if (len < 0)
                {
                    printf("Read command failed.\n");
                    break;
                }
                if (len == 0)
                {
                    printf("Connection closed.\n");
                    close(datasock);
                    close(msgsock);
                    break;
                }
				printf("command:%s.\n", command);
                if (!strcmp(command, "get"))
                {
                    memset(args, 0, sizeof(args));
                    recv(datasock, args, sizeof(args), 0);
                    cmdGet(datasock, args);
                    printf("Get done.\n");
                    continue;
                }
                if (!strcmp(command, "put"))
                {
                    memset(args, 0, sizeof(args));
                    recv(datasock, args, sizeof(args), 0);
                    cmdPut(datasock, args);
                    printf("Put done.\n");
                    continue;
                }
                if (!strcmp(command, "pwd"))
                {
                    cmdPwd(datasock);
                    printf("Pwd done.\n");
                    continue;
                }
                if (!strcmp(command, "dir"))
                {
                    cmdDir(datasock);
                    printf("Dir done.\n");
                    continue;
                }
                if (!strcmp(command, "cd"))
                {
                    memset(args, 0, sizeof(args));
                    recv(datasock, args, sizeof(args), 0);
                    cmdCd(datasock, args);
                    printf("Cd done.\n");
                    continue;
                }
                if (!strcmp(command, "quit"))
                {
                    printf("Quit\n");
                    break;
                }
                if (!strcmp(command, "?"))
                {
                    cmdHelp(datasock);
					printf("Help done.\n");
                    continue;
                }
                printf("Command error.\n");
            }
            printf("Connection closed.\n");
            close(datasock);
            close(msgsock);
			close(serverData);
            exit(1);
        }
    }
    close(serverMsg);
    return 0;
}
